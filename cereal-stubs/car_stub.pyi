from __future__ import annotations
from typing import List, Any
from enum import Enum
# This is an autogenerated file, do not edit unless you enjoy repitition a lot

class CarControl:
  
  class Actuators:
    
    class LongControlState(Enum):
      off = "off"
      pid = "pid"
      stopping = "stopping"
      startingDEPRECATED = "startingDEPRECATED"
    def new_message() -> Actuators: ...
    longControlState: CarControl.Actuators.LongControlState = ...
    brake: float = ...
    gas: float = ...
    steer: float = ...
    speed: float = ...
    steeringAngleDeg: float = ...
    accel: float = ...
  
  class CruiseControl:
    def new_message() -> CruiseControl: ...
    accelOverride: float = ...
    override: bool = ...
    cancel: bool = ...
    speedOverride: float = ...
  
  class HUDControl:
    
    class AudibleAlert(Enum):
      none = "none"
      engage = "engage"
      disengage = "disengage"
      refuse = "refuse"
      warningSoft = "warningSoft"
      warningImmediate = "warningImmediate"
      prompt = "prompt"
      promptRepeat = "promptRepeat"
      promptDistracted = "promptDistracted"
    
    class VisualAlert(Enum):
      none = "none"
      fcw = "fcw"
      steerRequired = "steerRequired"
      brakePressed = "brakePressed"
      wrongGear = "wrongGear"
      seatbeltUnbuckled = "seatbeltUnbuckled"
      speedTooHigh = "speedTooHigh"
      ldw = "ldw"
    def new_message() -> HUDControl: ...
    lanesVisible: bool = ...
    rightLaneVisible: bool = ...
    speedVisible: bool = ...
    leftLaneVisible: bool = ...
    visualAlert: CarControl.HUDControl.VisualAlert = ...
    audibleAlert: CarControl.HUDControl.AudibleAlert = ...
    leadVisible: bool = ...
    leftLaneDepart: bool = ...
    setSpeed: float = ...
    rightLaneDepart: bool = ...
  def new_message() -> CarControl: ...
  enabled: bool = ...
  actuatorsOutput: CarControl.Actuators = ...
  orientationNED: List[float] = ...
  latActive: bool = ...
  longActive: bool = ...
  brakeDEPRECATED: float = ...
  steeringTorqueDEPRECATED: float = ...
  activeDEPRECATED: bool = ...
  actuators: CarControl.Actuators = ...
  angularVelocity: List[float] = ...
  hudControl: CarControl.HUDControl = ...
  rollDEPRECATED: float = ...
  pitchDEPRECATED: float = ...
  cruiseControl: CarControl.CruiseControl = ...
  gasDEPRECATED: float = ...

class CarEvent:
  
  class EventName(Enum):
    canError = "canError"
    steerUnavailable = "steerUnavailable"
    brakeUnavailable = "brakeUnavailable"
    gasUnavailableDEPRECATED = "gasUnavailableDEPRECATED"
    wrongGear = "wrongGear"
    doorOpen = "doorOpen"
    seatbeltNotLatched = "seatbeltNotLatched"
    espDisabled = "espDisabled"
    wrongCarMode = "wrongCarMode"
    steerTempUnavailable = "steerTempUnavailable"
    reverseGear = "reverseGear"
    buttonCancel = "buttonCancel"
    buttonEnable = "buttonEnable"
    pedalPressed = "pedalPressed"
    cruiseDisabled = "cruiseDisabled"
    radarCanErrorDEPRECATED = "radarCanErrorDEPRECATED"
    dataNeededDEPRECATED = "dataNeededDEPRECATED"
    speedTooLow = "speedTooLow"
    outOfSpace = "outOfSpace"
    overheat = "overheat"
    calibrationIncomplete = "calibrationIncomplete"
    calibrationInvalid = "calibrationInvalid"
    controlsMismatch = "controlsMismatch"
    pcmEnable = "pcmEnable"
    pcmDisable = "pcmDisable"
    noTarget = "noTarget"
    radarFault = "radarFault"
    modelCommIssueDEPRECATED = "modelCommIssueDEPRECATED"
    brakeHold = "brakeHold"
    parkBrake = "parkBrake"
    manualRestart = "manualRestart"
    lowSpeedLockout = "lowSpeedLockout"
    plannerError = "plannerError"
    ipasOverrideDEPRECATED = "ipasOverrideDEPRECATED"
    joystickDebug = "joystickDebug"
    steerTempUnavailableSilent = "steerTempUnavailableSilent"
    resumeRequired = "resumeRequired"
    preDriverDistracted = "preDriverDistracted"
    promptDriverDistracted = "promptDriverDistracted"
    driverDistracted = "driverDistracted"
    geofenceDEPRECATED = "geofenceDEPRECATED"
    driverMonitorOnDEPRECATED = "driverMonitorOnDEPRECATED"
    driverMonitorOffDEPRECATED = "driverMonitorOffDEPRECATED"
    preDriverUnresponsive = "preDriverUnresponsive"
    promptDriverUnresponsive = "promptDriverUnresponsive"
    driverUnresponsive = "driverUnresponsive"
    belowSteerSpeed = "belowSteerSpeed"
    calibrationProgressDEPRECATED = "calibrationProgressDEPRECATED"
    lowBattery = "lowBattery"
    invalidGiraffeHondaDEPRECATED = "invalidGiraffeHondaDEPRECATED"
    vehicleModelInvalid = "vehicleModelInvalid"
    accFaulted = "accFaulted"
    sensorDataInvalid = "sensorDataInvalid"
    commIssue = "commIssue"
    tooDistracted = "tooDistracted"
    posenetInvalid = "posenetInvalid"
    soundsUnavailable = "soundsUnavailable"
    preLaneChangeLeft = "preLaneChangeLeft"
    preLaneChangeRight = "preLaneChangeRight"
    laneChange = "laneChange"
    invalidGiraffeToyotaDEPRECATED = "invalidGiraffeToyotaDEPRECATED"
    internetConnectivityNeededDEPRECATED = "internetConnectivityNeededDEPRECATED"
    communityFeatureDisallowedDEPRECATED = "communityFeatureDisallowedDEPRECATED"
    lowMemory = "lowMemory"
    stockAeb = "stockAeb"
    ldw = "ldw"
    carUnrecognized = "carUnrecognized"
    radarCommIssueDEPRECATED = "radarCommIssueDEPRECATED"
    driverMonitorLowAccDEPRECATED = "driverMonitorLowAccDEPRECATED"
    invalidLkasSetting = "invalidLkasSetting"
    speedTooHigh = "speedTooHigh"
    laneChangeBlocked = "laneChangeBlocked"
    relayMalfunction = "relayMalfunction"
    pedalPressedPreEnable = "pedalPressedPreEnable"
    stockFcw = "stockFcw"
    startup = "startup"
    startupNoCar = "startupNoCar"
    startupNoControl = "startupNoControl"
    startupMaster = "startupMaster"
    fcw = "fcw"
    steerSaturated = "steerSaturated"
    whitePandaUnsupportedDEPRECATED = "whitePandaUnsupportedDEPRECATED"
    startupOneplusDEPRECATED = "startupOneplusDEPRECATED"
    commIssueWarningDEPRECATED = "commIssueWarningDEPRECATED"
    belowEngageSpeed = "belowEngageSpeed"
    noGps = "noGps"
    focusRecoverActiveDEPRECATED = "focusRecoverActiveDEPRECATED"
    wrongCruiseMode = "wrongCruiseMode"
    neosUpdateRequiredDEPRECATED = "neosUpdateRequiredDEPRECATED"
    modeldLagging = "modeldLagging"
    deviceFalling = "deviceFalling"
    fanMalfunction = "fanMalfunction"
    cameraMalfunction = "cameraMalfunction"
    modelLagWarningDEPRECATED = "modelLagWarningDEPRECATED"
    gpsMalfunction = "gpsMalfunction"
    processNotRunning = "processNotRunning"
    dashcamMode = "dashcamMode"
    startupFuzzyFingerprintDEPRECATED = "startupFuzzyFingerprintDEPRECATED"
    controlsInitializing = "controlsInitializing"
    usbError = "usbError"
    roadCameraError = "roadCameraError"
    driverCameraError = "driverCameraError"
    wideRoadCameraError = "wideRoadCameraError"
    localizerMalfunction = "localizerMalfunction"
    startupNoFw = "startupNoFw"
    highCpuUsage = "highCpuUsage"
    cruiseMismatch = "cruiseMismatch"
    lkasDisabled = "lkasDisabled"
    gasPressedOverride = "gasPressedOverride"
    commIssueAvgFreq = "commIssueAvgFreq"
    cameraFrameRate = "cameraFrameRate"
    canBusMissing = "canBusMissing"
    controlsdLagging = "controlsdLagging"
  def new_message() -> CarEvent: ...
  preEnable: bool = ...
  enable: bool = ...
  softDisable: bool = ...
  override: bool = ...
  noEntry: bool = ...
  warning: bool = ...
  userDisable: bool = ...
  immediateDisable: bool = ...
  name: CarEvent.EventName = ...
  permanent: bool = ...

class CarParams:
  
  class CarFw:
    def new_message() -> CarFw: ...
    ecu: CarParams.Ecu = ...
    address: int = ...
    subAddress: int = ...
    fwVersion: bytes = ...
  
  class Ecu(Enum):
    eps = "eps"
    esp = "esp"
    fwdRadar = "fwdRadar"
    fwdCamera = "fwdCamera"
    engine = "engine"
    unknown = "unknown"
    dsu = "dsu"
    apgs = "apgs"
    transmission = "transmission"
    srs = "srs"
    gateway = "gateway"
    hud = "hud"
    combinationMeter = "combinationMeter"
    vsa = "vsa"
    programmedFuelInjection = "programmedFuelInjection"
    electricBrakeBooster = "electricBrakeBooster"
    shiftByWire = "shiftByWire"
    debug = "debug"
  
  class FingerprintSource(Enum):
    can = "can"
    fw = "fw"
    fixed = "fixed"
  
  class LateralINDITuning:
    def new_message() -> LateralINDITuning: ...
    innerLoopGainBP: List[float] = ...
    timeConstantV: List[float] = ...
    innerLoopGainV: List[float] = ...
    outerLoopGainV: List[float] = ...
    actuatorEffectivenessBP: List[float] = ...
    actuatorEffectivenessV: List[float] = ...
    outerLoopGainDEPRECATED: float = ...
    timeConstantBP: List[float] = ...
    outerLoopGainBP: List[float] = ...
    timeConstantDEPRECATED: float = ...
    actuatorEffectivenessDEPRECATED: float = ...
    innerLoopGainDEPRECATED: float = ...
  
  class LateralLQRTuning:
    def new_message() -> LateralLQRTuning: ...
    b: List[float] = ...
    dcGain: float = ...
    scale: float = ...
    l: List[float] = ...
    a: List[float] = ...
    c: List[float] = ...
    k: List[float] = ...
    ki: float = ...
  
  class LateralPIDTuning:
    def new_message() -> LateralPIDTuning: ...
    kiBP: List[float] = ...
    kf: float = ...
    kpV: List[float] = ...
    kiV: List[float] = ...
    kpBP: List[float] = ...
  
  class LateralParams:
    def new_message() -> LateralParams: ...
    torqueBP: List[int] = ...
    torqueV: List[int] = ...
  
  class LateralTorqueTuning:
    def new_message() -> LateralTorqueTuning: ...
    kf: float = ...
    useSteeringAngle: bool = ...
    friction: float = ...
    kp: float = ...
    ki: float = ...
  
  class LongitudinalPIDTuning:
    def new_message() -> LongitudinalPIDTuning: ...
    kiBP: List[float] = ...
    kf: float = ...
    kpV: List[float] = ...
    kiV: List[float] = ...
    kpBP: List[float] = ...
    deadzoneBP: List[float] = ...
    deadzoneV: List[float] = ...
  
  class NetworkLocation(Enum):
    fwdCamera = "fwdCamera"
    gateway = "gateway"
  
  class SafetyConfig:
    def new_message() -> SafetyConfig: ...
    safetyModel: CarParams.SafetyModel = ...
    safetyParamDEPRECATED: int = ...
    safetyParam: int = ...
    safetyParam2DEPRECATED: int = ...
  
  class SafetyModel(Enum):
    silent = "silent"
    hondaNidec = "hondaNidec"
    toyota = "toyota"
    elm327 = "elm327"
    gm = "gm"
    hondaBoschGiraffe = "hondaBoschGiraffe"
    ford = "ford"
    cadillac = "cadillac"
    hyundai = "hyundai"
    chrysler = "chrysler"
    tesla = "tesla"
    subaru = "subaru"
    gmPassive = "gmPassive"
    mazda = "mazda"
    nissan = "nissan"
    volkswagen = "volkswagen"
    toyotaIpas = "toyotaIpas"
    allOutput = "allOutput"
    gmAscm = "gmAscm"
    noOutput = "noOutput"
    hondaBosch = "hondaBosch"
    volkswagenPq = "volkswagenPq"
    subaruLegacy = "subaruLegacy"
    hyundaiLegacy = "hyundaiLegacy"
    hyundaiCommunity = "hyundaiCommunity"
    stellantis = "stellantis"
    faw = "faw"
    body = "body"
    hyundaiHDA2 = "hyundaiHDA2"
  
  class SteerControlType(Enum):
    torque = "torque"
    angle = "angle"
  
  class TransmissionType(Enum):
    unknown = "unknown"
    automatic = "automatic"
    manual = "manual"
    direct = "direct"
    cvt = "cvt"
  def new_message() -> CarParams: ...
  steerRateCost: float = ...
  directAccelControl: bool = ...
  enableGasInterceptor: bool = ...
  brakeMaxVDEPRECATED: List[float] = ...
  steerRatio: float = ...
  steerControlType: CarParams.SteerControlType = ...
  networkLocation: CarParams.NetworkLocation = ...
  stoppingDecelRate: float = ...
  radarOffCan: bool = ...
  longitudinalActuatorDelayUpperBound: float = ...
  flags: int = ...
  safetyConfigs: List[Any] = ...
  wheelbase: float = ...
  rotationalInertia: float = ...
  safetyParamDEPRECATED: int = ...
  startAccelDEPRECATED: float = ...
  mass: float = ...
  tireStiffnessRear: float = ...
  stoppingControl: bool = ...
  fingerprintSource: CarParams.FingerprintSource = ...
  stopAccel: float = ...
  notCar: bool = ...
  wheelSpeedFactor: float = ...
  steerMaxVDEPRECATED: List[float] = ...
  vEgoStopping: float = ...
  fuzzyFingerprint: bool = ...
  transmissionType: CarParams.TransmissionType = ...
  enableBsm: bool = ...
  gasMaxBPDEPRECATED: List[float] = ...
  carFw: List[Any] = ...
  minEnableSpeed: float = ...
  gasMaxVDEPRECATED: List[float] = ...
  steerMaxBPDEPRECATED: List[float] = ...
  pcmCruise: bool = ...
  longitudinalTuning: CarParams.LongitudinalPIDTuning = ...
  carFingerprint: str = ...
  carVin: str = ...
  isPandaBlackDEPRECATED: bool = ...
  maxSteeringAngleDeg: float = ...
  vEgoStarting: float = ...
  longitudinalActuatorDelayLowerBound: float = ...
  radarTimeStep: float = ...
  startingAccelRateDEPRECATED: float = ...
  steerRatioRear: float = ...
  steerLimitAlert: bool = ...
  alternativeExperience: int = ...
  communityFeatureDEPRECATED: bool = ...
  minSpeedCanDEPRECATED: float = ...
  steerActuatorDelay: float = ...
  enableApgs: bool = ...
  dashcamOnly: bool = ...
  tireStiffnessFront: float = ...
  safetyModelDEPRECATED: CarParams.SafetyModel = ...
  brakeMaxBPDEPRECATED: List[float] = ...
  centerToFront: float = ...
  hasStockCameraDEPRECATED: bool = ...
  enableDsu: bool = ...
  steerLimitTimer: float = ...
  minSteerSpeed: float = ...
  carName: str = ...
  openpilotLongitudinalControl: bool = ...
  lateralParams: CarParams.LateralParams = ...
  enableCameraDEPRECATED: bool = ...
  safetyModelPassiveDEPRECATED: CarParams.SafetyModel = ...

class CarState:
  
  class ButtonEvent:
    
    class Type(Enum):
      unknown = "unknown"
      leftBlinker = "leftBlinker"
      rightBlinker = "rightBlinker"
      accelCruise = "accelCruise"
      decelCruise = "decelCruise"
      cancel = "cancel"
      altButton1 = "altButton1"
      altButton2 = "altButton2"
      altButton3 = "altButton3"
      setCruise = "setCruise"
      resumeCruise = "resumeCruise"
      gapAdjustCruise = "gapAdjustCruise"
    def new_message() -> ButtonEvent: ...
    type: CarState.ButtonEvent.Type = ...
    pressed: bool = ...
  
  class CruiseState:
    def new_message() -> CruiseState: ...
    enabled: bool = ...
    speedOffset: float = ...
    standstill: bool = ...
    nonAdaptive: bool = ...
    available: bool = ...
    speed: float = ...
  
  class GearShifter(Enum):
    unknown = "unknown"
    park = "park"
    drive = "drive"
    neutral = "neutral"
    reverse = "reverse"
    sport = "sport"
    low = "low"
    brake = "brake"
    eco = "eco"
    manumatic = "manumatic"
  
  class WheelSpeeds:
    def new_message() -> CarState.WheelSpeeds: ...
    fr: float = ...
    fl: float = ...
    rl: float = ...
    rr: float = ...
  def new_message() -> CarState: ...
  events: List[Any] = ...
  charging: bool = ...
  aEgo: float = ...
  standstill: bool = ...
  espDisabled: bool = ...
  leftBlinker: bool = ...
  steeringRateDeg: float = ...
  canMonoTimes: List[int] = ...
  vEgoRaw: float = ...
  rightBlindspot: bool = ...
  rightBlinker: bool = ...
  steeringRateLimited: bool = ...
  steeringPressed: bool = ...
  clutchPressed: bool = ...
  seatbeltUnlatched: bool = ...
  doorOpen: bool = ...
  accFaulted: bool = ...
  steeringAngleDeg: float = ...
  buttonEvents: List[Any] = ...
  canValid: bool = ...
  steeringTorqueEps: float = ...
  yawRate: float = ...
  brakeHoldActive: bool = ...
  steerFaultTemporary: bool = ...
  brake: float = ...
  stockAeb: bool = ...
  genericToggle: bool = ...
  steeringAngleOffsetDeg: float = ...
  steerFaultPermanent: bool = ...
  stockFcw: bool = ...
  leftBlindspot: bool = ...
  fuelGauge: float = ...
  vEgo: float = ...
  wheelSpeeds: CarState.WheelSpeeds = ...
  cruiseState: CarState.CruiseState = ...
  brakePressed: bool = ...
  gearShifter: CarState.GearShifter = ...
  gasPressed: bool = ...
  canTimeout: bool = ...
  steeringTorque: float = ...
  errorsDEPRECATED: List[Any] = ...
  gas: float = ...
  brakeLightsDEPRECATED: bool = ...
  parkingBrake: bool = ...

class RadarData:
  
  class Error(Enum):
    canError = "canError"
    fault = "fault"
    wrongConfig = "wrongConfig"
  
  class RadarPoint:
    def new_message() -> RadarPoint: ...
    yRel: float = ...
    aRel: float = ...
    yvRel: float = ...
    measured: bool = ...
    vRel: float = ...
    trackId: int = ...
    dRel: float = ...
  def new_message() -> RadarData: ...
  errors: List[Any] = ...
  points: List[Any] = ...
  canMonoTimes: List[int] = ...
